#!/usr/bin/env perl
use warnings;
use strict;
use open OUT => ':locale';

use Text::CSV_XS;
use Getopt::Long;
use JSON;

my $array = 0;
my $pretty = 0;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'a|array' => sub { $array = 1; },
    'o|object' => sub { $array = 0; },
    'p|pretty' => \$pretty,
) or die;

my $json = JSON->new()->ascii(1)->pretty($pretty)->canonical(1);
my $csv = Text::CSV_XS->new({ auto_diag => 1, binary => 1 });

my $header;
my $lastARGV;
if ($pretty) {
    print("[");
} else {
    print("[");
}
my $comma = 0;
my $count = 0;
while (my $row = $csv->getline(\*ARGV)) {
    if (!defined $lastARGV || $ARGV ne $lastARGV) {
        $lastARGV = $ARGV;
        if (!$array) {
            $header = [@$row];
            next;
        }
    }
    $count += 1;
    print(",") if $comma;
    print("\n") if $pretty;
    my $o;
    if ($array) {
        $o = $row;
    } else {
        $o = {};
        for (my $i = 0; $i <= $#$row && $i <= $#$header; $i += 1) {
            $o->{$header->[$i]} = $row->[$i];
        }
    }
    my $j = $json->encode($o);
    if ($pretty) {
        $j =~ s{^}{   }gm;
        $j =~ s{\r?\n\z}{};
    }
    print($j);
    $comma = 1;
}
if ($pretty) {
    if ($count) {
        print("\n");
    }
    print("]\n");
} else {
    print("]");
}

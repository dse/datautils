#!/usr/bin/env perl
use warnings;
use strict;

use File::Basename qw(basename);
our $PROGNAME = basename($0);

use open OUT => ':locale';

my $optFormat = 'json';
use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    't|text' => sub { $optFormat = 'text'; },
    'j|json' => sub { $optFormat = 'json'; },
) or die("You can't type '$PROGNAME --help' for help.\n");

use JSON;
use List::Util qw(all max);

my $json = JSON->new()->pretty(1)->canonical(1)->ascii(1);

if (scalar @ARGV < 2) {
    die("not enough arguments\n");
}

my @filename;
my @object;
my $i = 0;
$/ = undef;
while (<>) {
    # seen in some JSON output by `mongoexport --jsonArray`.
    s{":\+Infinity\b}{":"<<<+Infinity>>>"}g;
    s{":\-Infinity\b}{":"<<<-Infinity>>>"}g;

    warn("parsing ...\n");
    my $object = $json->decode($_);
    push(@object, $object);
    push(@filename, $ARGV);
}

my @i;
for (my $i = 0; $i <= $#object; $i += 1) {
    if (ref $object[$i] eq 'HASH') {
        push(@i, $i);
    } else {
        warn(sprintf("%s: not an object\n", $filename[$i]));
    }
}

@object   = map { $object[$_]   } @i;
@filename = map { $filename[$_] } @i;
if (scalar @object < 2) {
    die("not enough objects\n");
}

my $cmp = compare(@object);
if ($optFormat eq 'json') {
    warn("outputting json");
    print($json->encode($cmp));
} else {
    warn("outputting text");
    printText($cmp);
}

sub compare {
    my (@obj) = @_;
    my %k;

    my @definedObj = grep { defined $_ } @obj;
    return unless scalar @definedObj;

    return unless scalar @definedObj;
    if (all { ref $_ eq 'HASH' } @definedObj) {
        my %k;
        foreach my $obj (@definedObj) {
            foreach my $k (keys %$obj) {
                $k{$k} = 1;
            }
        }
        my @k = sort keys %k;
        my $cmp = {};
        foreach my $k (@k) {
            my @cmp = map { defined $_ ? $_->{$k} : undef } @obj;
            $cmp->{$k} = compare(@cmp);
        }
        return $cmp;
    }
    if (all { ref $_ eq 'ARRAY' } @definedObj) {
        my $count = max map { scalar @$_ } @definedObj;
        my $cmp = [];
        for (my $i = 0; $i < $count; $i += 1) {
            my @cmp = map { defined $_ ? $_->[$i] : undef } @obj;
            if (grep { defined $_ } @cmp) {
                $cmp->[$i] = compare(@cmp);
            } else {
                $cmp->[$i] = undef;
            }
        }
        return $cmp;
    }
    if (all { ref $_ eq '' } @definedObj) {
        return [ @obj ];
    }
    return;
}

sub printText {
    my ($obj, $indent) = @_;
    $indent //= '';
    if (ref $obj eq 'HASH') {
        foreach my $key (sort keys %$obj) {
            my $value = $obj->{$key};
            if (ref $value eq 'ARRAY') {
                printf('%-51s', $indent.$key);
                printf('  %12s', printFloat($value->[0]));
                printf('  %12s', printFloat($value->[1]));
                print("\n");
            } elsif (ref $value eq 'HASH') {
                print("$indent$key\n");
                printText($value, $indent . '    ');
            }
        }
    }
}

sub printFloat {
    my ($float) = @_;
    if (!defined $float) {
        return('            ');
    }
    return sprintf('%12g', $float);
}

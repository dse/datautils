#!/usr/bin/env perl
use warnings;
use strict;
use File::Basename qw(basename);
our $PROGNAME = basename($0);
use open OUT => ':locale';
use feature 'say';

my $optFormat = 'json';
my $optType = 1;
my $heuristics = 0;
my @exclude;
my @include;
use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'h|heuristics' => \$heuristics,
    'i|include=s' => \@include,
    'x|exclude=s' => \@exclude,
    'c|csv'  => sub { $optFormat = 'csv'; },
    't|text' => sub { $optFormat = 'text'; },
    'j|json' => sub { $optFormat = 'json'; },
    'type=i' => \$optType,
) or die("You can't type '$PROGNAME --help' for help.\n");

@exclude = grep { m{\S} } map { split(qr{[\s,]+}, $_) } @exclude;
@include = grep { m{\S} } map { split(qr{[\s,]+}, $_) } @include;

if (scalar @ARGV < 2) {
    die("not enough arguments\n");
}

warn("FORMAT $optFormat\n");

use POSIX qw(round);
use Text::CSV_XS;
use JSON;

my $json = JSON->new()->pretty(1)->canonical(1)->ascii(1);

my @obj;

foreach my $arg (@ARGV) {
    warn(sprintf("file: %s\n", $arg));
    my $jsonText = get($arg);

    # seen in some JSON output by `mongoexport --jsonArray`.
    $jsonText =~ s{":\+Infinity\b}{":"<<<+Infinity>>>"}g;
    $jsonText =~ s{":\-Infinity\b}{":"<<<-Infinity>>>"}g;

    my $obj = $json->decode($jsonText);
    push(@obj, $obj);
}
warn(sprintf("comparing %d files\n", scalar(@obj)));

my $result = compare(\@obj);
if ($optFormat eq 'json') {
    print($json->encode($result));
}

sub get {
    my ($filename) = @_;
    my $fh;
    if (!open($fh, '<', $filename)) {
        die("$filename: $!\n");
    }
    local $/ = undef;
    return <$fh>;
}

sub compare {
    my ($objs, $level, $path, $result) = @_;
    my @obj = @$objs;
    $level //= 0;
    $path //= [];

    if ($optType == 1) {
        $result //= [];
    } elsif ($optType == 2 || $optType == 3 || $optType == 4) {
        $result //= {};
    }

    my %k;
    foreach my $obj (@obj) {
        if ($obj && ref $obj eq 'HASH') {
            foreach my $k (grep { $_ ne 'TOPTEN' } keys %$obj) {
                $k{$k} = 1;
            }
        }
    }

    my @k = keys %k;
    foreach my $k (@k) {
        my @o = map { ($_ && ref $_ eq 'HASH') ? $_->{$k} : undef } @obj;
        my $path2 = [@$path, $k];
        compare([@o], $level + 1, $path2, $result);
    }

    my @topten = map { ($_ && ref $_ eq 'HASH') ? $_->{TOPTEN} : undef } @obj;
    if (!grep { defined $_ } @topten) {
        return $result;
    }

    my %k2;
    my @hash = map { {} } @obj;
    for (my $i = 0; $i <= $#obj; $i += 1) {
        my $topten = $topten[$i];
        next if !$topten;
        foreach my $keyCount (@$topten) {
            my ($key, $count) = @$keyCount;
            $k2{$key} = 1;
            $hash[$i]{$key} = $count;
        }
    }

    my $thing1 = { path => $path, values => [] };
    my $thing23 = [];
    my $thing4 = {};

    my $pathString = join('.', @$path);
    return $result if grep { $_ eq $pathString } @exclude;

    if ($optFormat eq 'csv') {
        csvOut($pathString);
    } elsif ($optFormat eq 'text') {
        print("$pathString\n");
    }

    if ($optType == 2 || $optType == 3) {
        my $pathStr = join('/', @$path);
        $result->{$pathStr} = $thing23;
    } elsif ($optType == 4) {
        my $pathStr = join('/', @$path);
        $result->{$pathStr} = $thing4;
    }

    foreach my $key (sort keys %k2) {
        my @values;
        for (my $i = 0; $i <= $#obj; $i += 1) {
            if ($topten[$i] && defined $hash[$i]{$key}) {
                push(@values, $hash[$i]{$key});
            } else {
                push(@values, undef);
            }
        }

        if ($optType == 1) {
            push(@{$thing1->{values}}, {
                value => $key,
                stats => \@values,
            });
            push(@$result, $thing1);
        } elsif ($optType == 2) {
            push(@$thing23, {
                value => $key, stats => \@values,
            });
        } elsif ($optType == 3) {
            push(@$thing23, [$key, @values]);
        } elsif ($optType == 4) {
            $thing4->{$key} = \@values;
        }

        if ($optFormat eq 'csv') {
            csvOut('', ("" . $key), @values);
        } elsif ($optFormat eq 'text') {
            my $column = '    ' . $key;
            $column .= ' ' if length($column) % 2 == 1;
            $column .= ' .' x (31 - round(length($column) / 2));
            foreach my $value (@values) {
                if (defined $value) {
                    $column .= sprintf('  %6d', $value);
                } else {
                    $column .= '        ';
                }
            }
            print("$column\n");
        }
    }

    return $result;
}


our $csv;

sub csvOut {
    my (@data) = @_;
    if (!$csv) {
        $csv = Text::CSV_XS->new({
            auto_diag => 1,
            binary => 1,
        });
    }
    if (scalar @data == 1 && ref $data[0] eq 'ARRAY') {
        $csv->say(\*STDOUT, $data[0]);
    } else {
        $csv->say(\*STDOUT, \@data);
    }
}

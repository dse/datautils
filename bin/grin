#!/usr/bin/env perl
use warnings;
use strict;

# .NAME
#     grin - greppable JSON or YAML output
# .SEE ALSO
#     gron - https://github.com/tomnomnom/gron

use Getopt::Long;
use JSON::XS;
use YAML::XS;
use List::Util qw(max sum);

our $recurse;
our $brackets;
our $noArrayIndices;
our $noValues;
our $align;

Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'r|recurse'  => \$recurse,
    'b|brackets' => \$brackets,
    'I|n|no-array-indices|no-numeric' => \$noArrayIndices,
    'V|no-values' => \$noValues,
    'a|align:f'  => \$align,
) or die(":-(\n");

# for when -a/--align is specified without its optional argument
if (defined $align && $align == 0) {
    $align = 95;
}

my $json = JSON::XS->new();
my $exit = 0;

local $/ = undef;
while (<>) {
    my $o = eval { $json->decode($_); };
    if ($@) {
        $o = eval { YAML::XS::Load($_); };
        if ($@) {
            warn(sprintf("%s: input is neither JSON nor YAML\n"));
            $exit = 1;
            next;
        }
    }
    if ($align) {
        my $width = computeColumnSize($o, $align);
        printf("%s\n", $width);
        grin($o, undef, $width);
    } else {
        grin($o);
    }
}

exit($exit);

sub grin {
    my ($o, $lvalue, $sub) = @_;
    $lvalue //= 'json';
    if (ref $o eq 'ARRAY') {
        for (my $i = 0; $i < scalar @$o; $i += 1) {
            if ($noArrayIndices) {
                grin($o->[$i], $lvalue . '[#]');
            } else {
                grin($o->[$i], $lvalue . '[' . $i . ']');
            }
        }
        return;
    }
    if (ref $o eq 'HASH') {
        my @keys = sort keys %$o;
        foreach my $key (@keys) {
            grin($o->{$key}, $lvalue . suffix($key), $sub);
        }
        return;
    }
    if ($recurse && defined $o && looksLikeJson($o)) {
        my $oo = eval { $json->decode($o); };
        if ($oo && !$@) {
            grin($oo, $lvalue, $sub);
            return;
        }
    }
    if ($noValues) {
        printf("%s\n", $lvalue);
    } elsif (ref $sub eq 'CODE') {
        $sub->($lvalue);
    } elsif ($sub) {
        printf("%-*s = %s;\n", $sub, $lvalue, $json->encode($o));
    } else {
        printf("%s = %s;\n", $lvalue, $json->encode($o));
    }
}

sub computeColumnSize {
    my ($o, $pct) = @_;
    my $lengths = {};
    my $sub = sub {
        my ($lvalue) = @_;
        $lengths->{length($lvalue)} += 1;
    };
    grin($o, undef, $sub);
    return ninetyFivePercent($lengths, $pct);
}

sub isIdentifier {
    my ($s) = @_;
    return $s =~ m{^[_\$A-Za-z][_\$A-Za-z0-9]*$};
}

sub suffix {
    my ($key) = @_;
    return '.' . $key if !$brackets && isIdentifier($key);
    return '[' . $json->encode($key) . ']';
}

sub looksLikeJson {
    my ($string) = @_;
    return 1 if substr($string, 0, 1) eq '[' && substr($string, -1, 1) eq ']';
    return 1 if substr($string, 0, 1) eq '{' && substr($string, -1, 1) eq '}';
    return;
}

sub ninetyFivePercent {
    my ($lengths, $pct) = @_;
    my $total = sum values %$lengths;
    my $accum = 0;
    foreach my $key (sort { $b <=> $a } keys %$lengths) {
        $accum += $lengths->{$key};
        if ($accum * 100 > $total * (100 - $pct)) {
            return $key;
        }
    }
}
